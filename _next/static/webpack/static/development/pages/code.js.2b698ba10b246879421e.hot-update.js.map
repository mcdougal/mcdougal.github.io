{"version":3,"file":"static/webpack/static/development/pages/code.js.2b698ba10b246879421e.hot-update.js","sources":["webpack:///./containers/Code/CodeCard/CodeCard.js"],"sourcesContent":["import Button from '@material-ui/core/Button';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport Fade from '@material-ui/core/Fade';\nimport Modal from '@material-ui/core/Modal';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme } from '@material-ui/styles';\nimport classNames from 'classnames';\nimport { withRouter } from 'next/router';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport styles from './CodeCard.css';\n\nconst getTransform = (selected, closing, contentRef) => {\n  if (typeof window === `undefined`) {\n    return null;\n  }\n\n  if (closing) {\n    return {\n      x: 0,\n      y: 0,\n      scale: 1,\n      extraHeight: 0,\n    };\n  }\n\n  // Attempt to get the height of the text content, if it's available.\n  // Otherwise, just make a best guess.\n  const contentHeight = contentRef.current\n    ? contentRef.current.scrollHeight\n    : 200;\n\n  const left = selected.left;\n  const top = selected.top;\n  const width = selected.width;\n  const height = selected.height + contentHeight;\n  const windowWidth = window.innerWidth;\n  const windowHeight = window.innerHeight;\n\n  let loopProtector;\n\n  let scale;\n  let scaledWidth;\n  let scaledHeight;\n  let scaleRatio = 1;\n  loopProtector = 0;\n\n  while (true) {\n    loopProtector += 1;\n    if (loopProtector > 20) {\n      break;\n    }\n\n    scale = (windowWidth / width) * scaleRatio;\n    scaledWidth = width * scale;\n    scaledHeight = height * scale;\n\n    const overflows = scaledHeight > windowHeight || scaledWidth > 800;\n\n    if (!overflows) {\n      break;\n    }\n\n    scaleRatio -= 0.05;\n  }\n\n  const newLeft = -left + windowWidth / 2 - width / 2;\n  const newTop = -top + windowHeight / 2 - height / 2;\n\n  // The gap between the top of the scaled card and the top of the viewport\n  // should not exceed this percentage of the viewport height.\n  const minTopGap = windowWidth < 600 ? 0.05 : 0.1;\n\n  let topGap;\n  let topGapAdjustment = 0;\n  loopProtector = 0;\n\n  while (true) {\n    loopProtector += 1;\n    if (loopProtector > 20) {\n      break;\n    }\n\n    topGap = top + (newTop - topGapAdjustment) - (scaledHeight - height) / 2;\n\n    if (topGap < windowHeight * minTopGap) {\n      break;\n    }\n\n    topGapAdjustment += windowHeight * 0.02;\n  }\n\n  let extraHeight = 0;\n  loopProtector = 0;\n\n  if (windowWidth < 600) {\n    while (true) {\n      loopProtector += 1;\n      if (loopProtector > 20) {\n        break;\n      }\n\n      const bottomGap =\n        windowHeight - (topGap + (height + extraHeight) * scale);\n\n      if (bottomGap > 24) {\n        extraHeight += 16;\n      }\n    }\n  }\n\n  return {\n    x: newLeft,\n    y: newTop - topGapAdjustment,\n    scale,\n    extraHeight,\n  };\n};\n\nconst CodeCard = ({ description, href, image, label, name }) => {\n  const classes = makeStyles((theme) => {\n    return {\n      ...styles(theme),\n      rawr: {},\n      '@global body.webp': {\n        rawr: {\n          background: `red`,\n        },\n      },\n    };\n  })();\n\n  console.log(classes);\n\n  const theme = useTheme();\n  const cardRef = useRef(null);\n  const contentRef = useRef(null);\n  const [selected, setSelected] = useState(null);\n  const [closing, setClosing] = useState(false);\n\n  const handleOpen = useCallback(() => {\n    // Add hash to URL\n    window.history.pushState(\n      ``,\n      document.title,\n      `${window.location.pathname}${window.location.search}#${name}`\n    );\n\n    const rect = cardRef.current.getBoundingClientRect();\n    setSelected({\n      left: rect.left,\n      top: rect.top,\n      width: rect.width,\n      height: rect.height,\n    });\n  }, [name]);\n\n  const handleClose = useCallback(() => {\n    setClosing(true);\n    setTimeout(() => {\n      setClosing(false);\n      setSelected(null);\n    }, theme.transitions.duration.leavingScreen);\n\n    if (typeof window !== `undefined`) {\n      // Remove hash from URL\n      window.history.pushState(\n        ``,\n        document.title,\n        `${window.location.pathname}${window.location.search}`\n      );\n    }\n  }, [theme]);\n\n  const handlePopState = useCallback(\n    (event) => {\n      const hash = event.currentTarget.location.hash;\n\n      if (!hash && selected) {\n        handleClose();\n      } else if (hash === `#${name}` && !selected) {\n        handleOpen();\n      }\n    },\n    [name, selected, handleOpen, handleClose]\n  );\n\n  useEffect(() => {\n    window.addEventListener(`popstate`, handlePopState);\n\n    return () => {\n      window.removeEventListener(`popstate`, handlePopState);\n    };\n  }, [handlePopState]);\n\n  let containerProps = null;\n  let contentActionProps = null;\n  let mediaProps;\n\n  if (selected || closing) {\n    const transformProps = getTransform(selected, closing, contentRef);\n    let transform;\n    let contentPadding;\n\n    if (transformProps) {\n      const { x, y, scale, extraHeight } = transformProps;\n      transform = `translate3D(${x}px, ${y}px, 0) scale(${scale})`;\n      contentPadding = extraHeight;\n    } else {\n      transform = null;\n      contentPadding = 0;\n    }\n\n    containerProps = {\n      style: {\n        left: selected.left,\n        maxWidth: `none`,\n        transform,\n        top: selected.top,\n        width: selected.width,\n      },\n    };\n    contentActionProps = {\n      style: {\n        paddingTop: 16 + contentPadding,\n      },\n    };\n    mediaProps = {\n      component: `a`,\n      href,\n      rel: `noopener noreferrer`,\n      target: `_blank`,\n    };\n  } else {\n    mediaProps = {\n      onClick: handleOpen,\n    };\n  }\n\n  return (\n    <>\n      <Modal\n        BackdropProps={{\n          invisible: true,\n        }}\n        className={classes.modal}\n        onClose={handleClose}\n        open={Boolean(selected)}>\n        <div />\n      </Modal>\n      <Fade in={Boolean(selected && !closing)} mountOnEnter unmountOnExit>\n        <div className={classes.backdrop} />\n      </Fade>\n      {selected && (\n        <div className={classes.card} role=\"presentation\">\n          <div className={classes.media} />\n          <div className={classes.content}>{description}</div>\n        </div>\n      )}\n      <Paper\n        {...containerProps}\n        className={classNames(classes.card, {\n          [classes.selected]: selected,\n          [classes.closing]: closing,\n        })}\n        ref={cardRef}>\n        <ButtonBase\n          {...mediaProps}\n          className={classes.media}\n          disableRipple\n          style={{ backgroundImage: `url(${image})` }}\n        />\n        <div className={classes.content} ref={contentRef}>\n          <div className={classes.contentInner}>\n            <Typography className={classes.contentText} variant=\"caption\">\n              {label}\n            </Typography>\n            <Typography\n              className={classes.contentText}\n              color=\"textSecondary\"\n              variant=\"caption\">\n              {` `}â€”{` `}\n              {description}\n            </Typography>\n          </div>\n          <div {...contentActionProps} className={classes.contentActions}>\n            <Button\n              className={classes.contentActionButton}\n              color=\"secondary\"\n              onClick={handleClose}>\n              Back\n            </Button>\n            <Button\n              className={classes.contentActionButton}\n              color=\"secondary\"\n              component=\"a\"\n              href={href}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\">\n              Check it out!\n            </Button>\n          </div>\n        </div>\n      </Paper>\n    </>\n  );\n};\n\nCodeCard.propTypes = {\n  description: PropTypes.node.isRequired,\n  href: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport default withRouter(CodeCard);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAGA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AADA;AAHA;AASA;AAEA;AAEA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAoBA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AADA;AAGA;AACA;AACA;AAGA;AACA;AADA;AAGA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAIA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;A","sourceRoot":""}